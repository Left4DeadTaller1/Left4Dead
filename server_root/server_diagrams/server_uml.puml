@startuml
scale 1200 width
skinparam shadowing false
skinparam sequenceParticipant underline

skinparam nodesep 50
skinparam ranksep 50
left to right direction
skinparam linetype ortho
skinparam shadowing false
skinparam sequenceParticipant underline
skinparam sequenceArrowThickness 2

skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBorderColor black


skinparam classArrow {
    Color black
    FontSize 20
    FontStyle bold
}
skinparam defaultFontName Arial
skinparam defaultFontSize 16

class Server {
    - svr_socket : Socket
    - acep_th : Acceptor
    - isAcceptorRunning : bool
    + Server(servname : const char*)
    + run() : void
    + ~Server()
}

class Socket {
    - skt : int
    - closed : bool
    + Socket(hostname : const char*, servname : const char*)
    + Socket(servname : const char*)
    + accept() : Socket
    + shutdown(how : int) : void
    + close() : int
    + ~Socket()
}

class Acceptor {
    - skt : Socket&
    - clients : list<shared_ptr<ClientConnection>>
    - gamesManager : GamesManager
    + Acceptor(skt : Socket&)
    + run() : void override
    + shutdown() : void
    + ~Acceptor()
    - reap_dead() : void
    - kill_all() : void
}

class ClientConnection {
    - clientSocket : Socket
    - alive : bool
    - gamesManager : GamesManager&
    - gameResponses : Queue<shared_ptr<vector<uint8_t>>>
    - sender : ClientSender
    - receiver : ClientReceiver
    + ClientConnection(skt : Socket&&, gamesManager : GamesManager&)
    + connectToClient() : void
    + checkThreads() : void
    + menu() : void
    + inGame() : void
    + isRemovable() : bool
    + kill() : void
}

class GamesManager {
    - games : unordered_map<int, shared_ptr<Game>>
    - m : mutex
    - nextGameId : int
    + GamesManager()
    + startGame(gameToStart : shared_ptr<Game>) : void
    + createLobby(gameResponses : Queue<shared_ptr<vector<uint8_t>>>&, nickName : string, typeWeapon : int, typeMap : int) : GameRecord
    + joinLobby(gameCode : unsigned int, gameResponses : Queue<shared_ptr<vector<uint8_t>>>&, playerNickname : string, weaponType : int) : GameRecord
    + removeFinishedGames() : void
    + killGames() : void
}

Server -> Socket : uses >
Server -> Acceptor
Acceptor -> Socket : uses >
Acceptor -> ClientConnection : creates >
Acceptor -> GamesManager
ClientConnection -> GamesManager : reference >

@enduml
